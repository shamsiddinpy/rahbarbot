import logging
import os

from aiogram import F
from aiogram import Router
from aiogram.enums import ContentType
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.types import Message
from asgiref.sync import sync_to_async
from django.contrib.auth import get_user_model
from dotenv import load_dotenv

from apps.bot.button.Inline import get_contact_keyboard, attachment_question, \
    confirm_buttons, murajat_button, back_button, \
    get_contact_yes_not_keyboard, get_contact_phone_keyboard, restart_button, to_answer, murajat_button2
from apps.bot.button.Inline import personal_info_buttons
from apps.bot.main import bot
from apps.bot.save_to_database import save_to_model
from apps.bot.state.leader import ComplaintForm
from apps.models import Request

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
User = get_user_model()

load_dotenv()
main_router = Router()


@main_router.message(CommandStart())
async def cmd_start(message: Message):
    telegram_id = message.from_user.id
    username = message.from_user.username
    last_name = message.from_user.last_name
    first_name = message.from_user.first_name

    async def create_or_get_user():
        user_exists = await sync_to_async(User.objects.filter(telegram_id=telegram_id).exists)()
        if not user_exists:
            await sync_to_async(User.objects.create)(
                telegram_id=telegram_id,
                username=username,
                first_name=first_name,
                last_name=last_name,
                is_active=True,
            )

    await create_or_get_user()
    begin_text = (
        """üì© –•–æ–¥–∏–º–ª–∞—Ä —É—á—É–Ω –∞–Ω–æ–Ω–∏–º —ë–∫–∏ –æ—á–∏“õ –º—É—Ä–æ–∂–∞–∞—Ç –∏–º–∫–æ–Ω–∏—è—Ç–∏! üì©

        “≤—É—Ä–º–∞—Ç–ª–∏ —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏, —ç–Ω–¥–∏–ª–∏–∫–¥–∞ –∞–Ω–æ–Ω–∏–º —ë–∫–∏ –æ—á–∏“õ —Ä–∞–≤–∏—à–¥–∞ —û–∑ —Ñ–∏–∫—Ä–ª–∞—Ä–∏–Ω–≥–∏–∑, —Ç–∞–∫–ª–∏—Ñ–ª–∞—Ä–∏–Ω–≥–∏–∑ —ë–∫–∏ –º—É–∞–º–º–æ–ª–∞—Ä–∏–Ω–≥–∏–∑–Ω–∏ –±–æ—Ç –æ—Ä“õ–∞–ª–∏ —Ä–∞“≥–±–∞—Ä–≥–∞ –∂—û–Ω–∞—Ç–∏—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω.

        ü§ê (–ò—Ö—Ç–∏—ë—Ä–∏–π) –∞–Ω–æ–Ω–∏–º–ª–∏–∫ –∫–∞—Ñ–æ–ª–∞—Ç–ª–∞–Ω–∞–¥–∏! –ê–≥–∞—Ä –∞–Ω–æ–Ω–∏–º –º—É—Ä–æ–∂–∞–∞—Ç–Ω–∏ —Ç–∞–Ω–ª–∞—Å–∞–Ω–≥–∏–∑, —à–∞—Ö—Å–∏–π –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–≥–∏–∑ —Å–∞“õ–ª–∞–Ω–º–∞–π–¥–∏ –≤–∞ –æ—à–∫–æ—Ä “õ–∏–ª–∏–Ω–º–∞–π–¥–∏.

        üë§ “ö–∞–Ω–¥–∞–π –∏—à–ª–∞–π–¥–∏?
        1Ô∏è‚É£ üìù –°—û—Ä–æ–≤ —ë–∫–∏ —Ç–∞–∫–ª–∏—Ñ–∏–Ω–≥–∏–∑–Ω–∏ —ë–∑–∏–Ω–≥.
        2Ô∏è‚É£ üì∑ –ê–≥–∞—Ä —Ö–æ“≥–ª–∞—Å–∞–Ω–≥–∏–∑, —Ä–∞—Å–º —ë–∫–∏ –≤–∏–¥–µ–æ —é–∫–ª–∞–Ω–≥.
        3Ô∏è‚É£ üîí –ê–Ω–æ–Ω–∏–º —ë–∫–∏ –æ—á–∏“õ —Ç–∞—Ä–∑–¥–∞ —é–±–æ—Ä–∏—à–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥.
        4Ô∏è‚É£ ‚úÖ –¢–∞—Å–¥–∏“õ–ª–∞–Ω–≥ –≤–∞ —é–±–æ—Ä–∏–Ω–≥ !

        üì® –ò—à–æ–Ω—á–ª–∏, —Ç–µ–∑–∫–æ—Ä –≤–∞ —ç—Ä–∫–∏–Ω –∞–ª–æ“õ–∞ ‚Äì —Ä–∞“≥–±–∞—Ä–≥–∞ –±–µ–≤–æ—Å–∏—Ç–∞ –µ—Ç–∫–∞–∑–∏–ª–∞–¥–∏!
        ‚¨áÔ∏è –¢—É–≥–º–∞–Ω–∏ –±–æ—Å–∏–±, –º—É—Ä–æ–∂–∞–∞—Ç–∏–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏–Ω–≥ ‚¨áÔ∏è
        """
    )
    await message.answer(begin_text, reply_markup=get_contact_keyboard())


@main_router.callback_query(lambda c: c.data == "rahbarga")
async def cb_rahbarga(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–ú—É—Ä–∞–∂–∞—Ç–∏–Ω–≥–∏–∑–Ω–∏ —ë–∑–∏–± “õ–æ–ª–¥–∏—Ä–∏–Ω–≥....",
        reply_markup=murajat_button()
    )
    await state.set_state(ComplaintForm.waiting_for_complaint)
    await callback.answer()


@main_router.callback_query(lambda c: c.data in ["murajat", "cancel"])
async def handle_callback(callback: CallbackQuery, state: FSMContext):
    if callback.data == "murajat":
        await callback.message.delete()
        await callback.message.answer(
            "Muammo haqida batafsil yozib qoldiring.\n"
            "Agar bekor qilmoqchi bo‚Äòlsangiz, 'Bekor qilish' tugmasini bosing.",
        )
        await state.set_state(ComplaintForm.waiting_for_complaint)
    elif callback.data == "cancel":
        await state.clear()
        await callback.message.delete()
        await callback.message.answer("–°–∏–∑–Ω–∏–Ω–≥ –º—É—Ä–æ–∂–∞–∞—Ç–∏–Ω–≥–∏–∑ –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–¥–∏.", back_button())
    await callback.answer()


@main_router.callback_query(lambda c: c.data == "back_button_cancel")
async def handle_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await cb_rahbarga(callback, state)
    await callback.answer()


@main_router.message(ComplaintForm.waiting_for_complaint)
async def process_complaint(message: Message, state: FSMContext):
    user_input = message.text.strip()
    word_count = len(user_input.split())

    if word_count < 1:
        await message.answer("–ú—É—Ä–æ–∂–∞–∞—Ç–∏–Ω–≥–∏–∑–¥–∞ –∫–∞–º–∏–¥–∞ 2 —Ç–∞ —Å—û–∑ —ë–∑–∏—à–∏–Ω–≥–∏–∑ –∫–µ—Ä–∞–∫. –ò–ª—Ç–∏–º–æ—Å, –±–∞—Ç–∞—Ñ—Å–∏–ª—Ä–æ“õ —ë–∑–∏–Ω–≥.")
        return

    await state.update_data(complaint=user_input)
    await message.answer("–ú—É—Ä–æ–∂–∞–∞—Ç–∏–Ω–≥–∏–∑ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏. *–†–∞—Å–º —ë–∫–∏ –≤–∏–¥–µ–æ —é–±–æ—Ä–º–æ“õ—á–∏–º–∏—Å–∏–∑..?*", parse_mode="Markdown",
                         reply_markup=attachment_question())
    await state.set_state(ComplaintForm.waiting_for_attachment)


@main_router.callback_query(lambda c: c.data in ["yes_attachment", "no_attachment"])
async def handle_attachment_question(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"Current state: {current_state}")
    logging.info(f"Callback data: {callback.data}")
    if callback.data == "yes_attachment":
        await callback.message.answer("–†–∞—Å–º —ë–∫–∏ –≤–∏–¥–µ–æ —é–±–æ—Ä–∏–Ω–≥:")
        await state.set_state(ComplaintForm.waiting_for_attachment)
    elif callback.data == "no_attachment":
        await callback.message.answer("–é–∑–∏–Ω–≥–∏–∑ “≥–∞“õ–∏–Ω–≥–∏–∑–¥–∞ –º–∞—ä–ª—É–º–æ—Ç –±–µ—Ä–∞—Å–∏–∑–º–∏...?", reply_markup=personal_info_buttons())
        await state.set_state(ComplaintForm.waiting_for_user_info)
    await callback.answer()


# Photo
@main_router.message(
    ComplaintForm.waiting_for_attachment,
    F.content_type.in_([ContentType.PHOTO, ContentType.VIDEO, ContentType.VIDEO_NOTE])
)
async def process_file_upload(message: Message, state: FSMContext):
    data = await state.get_data()
    attachments = data.get("attachments", [])  # E'tibor bering: "attachment" emas, "attachments"

    if message.photo:
        file_id = message.photo[-1].file_id
        attachments.append({"type": "photo", "file_id": file_id})
    elif message.video:
        file_id = message.video.file_id
        attachments.append({"type": "video", "file_id": file_id})
    elif message.video_note:
        file_id = message.video_note.file_id
        attachments.append({"type": "video_note", "file_id": file_id})

    # Yangilangan ro'yxatni saqlaymiz
    await state.update_data(attachments=attachments)

    await message.answer("–é–∑–∏–Ω–≥–∏–∑ “≥–∞“õ–∏–Ω–≥–∏–∑–¥–∞ –º–∞—ä–ª—É–º–æ—Ç –±–µ—Ä–∞—Å–∏–∑–º–∏..?", reply_markup=personal_info_buttons())
    await state.set_state(ComplaintForm.waiting_for_user_info)


@main_router.callback_query(ComplaintForm.waiting_for_user_info,
                            lambda c: c.data in ["skip_info_yes", "provide_info_not"])
async def handle_personal_info(callback: CallbackQuery, state: FSMContext):
    """
    Foydalanuvchi shaxsiy ma'lumotni yuborish yoki yubormaslikni tanlaydi.
    """
    if callback.data == "skip_info_yes":
        await callback.message.answer("–ò—Å–º–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:")
        await state.set_state(ComplaintForm.name)
    elif callback.data == "provide_info_not":
        data = await state.get_data()
        await send_summary(callback.message, data)
        await state.set_state(ComplaintForm.confirm_details)
    await callback.answer()


@main_router.message(ComplaintForm.name)
async def process_name(message: Message, state: FSMContext):
    full_name = message.text.strip()
    await state.update_data(full_name=full_name)
    await message.answer(
        "–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∞—Å–∏–∑–º–∏..?",
        reply_markup=get_contact_yes_not_keyboard()
    )
    await state.set_state(ComplaintForm.phone_number)


@main_router.callback_query(lambda c: c.data in ["contact_skip_info_yes", "contact_provide_info_not"])
async def handle_phone_decision(callback: CallbackQuery, state: FSMContext):
    if callback.data == "contact_skip_info_yes":
        await callback.message.answer("–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏–Ω–≥:", reply_markup=get_contact_phone_keyboard())
        await state.set_state(ComplaintForm.phone_number)
    elif callback.data == "contact_provide_info_not":
        await state.update_data(phone_number=" ")
        data = await state.get_data()
        await send_summary(callback.message, data)
        await state.set_state(ComplaintForm.confirm_details)
    await callback.answer()


async def send_summary(message, data):
    """
    Foydalanuvchi tomonidan kiritilgan ma'lumotlarni xulosa qilib yuborish.
    """
    full_name = data.get("full_name", "")
    phone_number = data.get("phone_number", "")
    complaint = data.get("complaint", "")
    attachments = data.get("attachments", [])  # [ {"type":"photo","file_id":...}, ...]

    summary = (
        f"–ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–≥–∏–∑:\n\n"
        f"üë§ –ò—Å–º: {full_name}\n"
        f"üìû–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
        f"‚úâÔ∏è –ú—É—Ä–æ–∂–∞–∞—Ç: {complaint}\n\n"
        f"“≤–∞–º–º–∞—Å–∏ —Ç—û“ì—Ä–∏–º–∏..?"
    )
    for attach in attachments:
        t = attach["type"]
        fid = attach["file_id"]
        if t == "photo":
            await message.answer_photo(fid)
        elif t == "video":
            await message.answer_video(fid)
        elif t == "video_note":
            await message.answer_video_note(fid)
    await message.answer(summary, reply_markup=confirm_buttons())


@main_router.message(ComplaintForm.phone_number, F.content_type == ContentType.CONTACT)
async def process_phone_number(message: Message, state: FSMContext):
    if not message.contact:
        await message.answer("–ò–ª—Ç–∏–º–æ—Å, —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —Ç—É–≥–º–∞ –æ—Ä“õ–∞–ª–∏ —é–±–æ—Ä–∏–Ω–≥...")
        return
    phone_number = message.contact.phone_number
    await state.update_data(phone_number=phone_number)
    data = await state.get_data()
    full_name = data.get("full_name", "")
    complaint = data.get("complaint", "")

    attachments = data.get("attachments", [])

    summary = (
        f"Ma'–ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–≥–∏–∑:\n\n\n"
        f"–ò—Å–º: {full_name}\n\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n\n"
        f"–ú—É—Ä–æ–∂–∞–∞—Ç: {complaint}\n\n"
        f"“≤–∞–º–º–∞—Å–∏ —Ç—û“ì—Ä–∏–º–∏..?"
    )
    for attach in attachments:
        t = attach["type"]
        fid = attach["file_id"]
        if t == "photo":
            await message.answer_photo(fid, caption="–°–∏–∑ —é–±–æ—Ä–≥–∞–Ω —Ä–∞—Å–º")
        elif t == "video":
            await message.answer_video(fid, caption="–°–∏–∑ —é–±–æ—Ä–≥–∞–Ω –≤–∏–¥–µ–æ")
        elif t == "video_note":
            await message.answer_video_note(fid)

    await message.answer(summary, reply_markup=confirm_buttons())
    await state.set_state(ComplaintForm.confirm_details)


@main_router.callback_query(ComplaintForm.confirm_details, lambda c: c.data == "confirm")
async def confirm_data(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    telegram_id = callback.from_user.id
    full_name = data.get("full_name", "")
    phone_number = data.get("phone_number", "")
    complaint = data.get("complaint", "")
    attachment = data.get("attachments", [])  # Ro'yxat
    single_attachment = None
    if attachment:
        single_attachment = attachment[0]["file_id"]  # faqat ro'yxatning 1-elementi

    request = await save_to_model(
        telegram_id=telegram_id,
        reason=complaint,
        attachment=single_attachment,
        phone_number=phone_number,
        full_name=full_name,
    )
    if not request:
        await callback.message.answer("–ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ —Å–∞“õ–ª–∞—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏.")
        return

    await callback.message.answer("–ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–≥–∏–∑ —é–±–æ—Ä–∏–ª–¥–∏.\n “õ–∞–π—Ç–∞–¥–∞–Ω /start –±–æ—Å–∏–Ω–≥", )

    # Rahbarga yuborish
    manager_telegram_id = os.getenv("MANAGER_TELEGRAM_ID")
    if not manager_telegram_id:
        await callback.message.answer("–†–∞“≥–±–∞—Ä ID –∞–Ω–∏“õ–ª–∞–Ω–º–∞–¥–∏. –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥.")
        return

    message_to_manager = (
        f"üì© *–Ø–Ω–≥–∏ –º—É—Ä–æ–∂–∞–∞—Ç* “õ–æ–ª–¥–∏—Ä–∏–ª–¥–∏:\n\n"
        f"üë§ *–ò—Å–º*: {full_name}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω*: {phone_number}\n"
        f"‚úâÔ∏è *–ú—É—Ä–æ–∂–∞–∞—Ç*: {complaint}\n"
        f"–°—Ç–∞—Ç—É—Å: *–ö—É—Ç–∏–ª–∞—ë—Ç–≥–∞–Ω*"
    )

    try:
        await bot.send_message(
            chat_id=manager_telegram_id,
            text=message_to_manager,
            reply_markup=to_answer(request.id),  # Request ID bilan tugmalarni qo'shish
            parse_mode="Markdown"
        )
        # logger.info(message_to_manager)
        for attach in attachment:
            t = attach["type"]
            fid = attach["file_id"]
            if t == "photo":
                await bot.send_photo(manager_telegram_id, fid)
            elif t == "video":
                await bot.send_video(manager_telegram_id, fid)
            elif t == "video_note":
                await bot.send_video_note(manager_telegram_id, fid)
    except Exception as e:
        logging.error(f"–†–∞“≥–±–∞—Ä–≥–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫: {e}")

    await state.clear()
    await callback.answer()


@main_router.callback_query(lambda c: c.data.startswith("reply:"))
async def start_reply(callback: CallbackQuery, state: FSMContext):
    """
    Rahbar javob berishni boshlaganida ushbu handler ishga tushadi.
    """
    request_id = callback.data.split(":")[1]  # Request ID ni ajratib olish
    logging.info(f"Request ID: {request_id}")  # Debug log

    @sync_to_async
    def mark_request_as_read_and_get_user(_id):
        request_obj = Request.objects.select_related('user').get(id=_id)
        request_obj.is_read = True
        request_obj.save()
        return request_obj, request_obj.user.telegram_id

    try:
        request_obj, user_tg_id = await mark_request_as_read_and_get_user(request_id)
        logging.info(f"Request: {request_obj}")

        await state.update_data(
            request_id=request_id,
            telegram_id=user_tg_id,
            message_id=callback.message.message_id,
        )

        logging.info(f"Request ID: {request_id}, Telegram ID: {callback.from_user.id}")

        await callback.message.answer("–ñ–∞–≤–æ–±–∏–Ω–≥–∏–∑–Ω–∏ —ë–∑–∏–Ω–≥:")
        await state.set_state(ComplaintForm.waiting_for_reply)
        await callback.answer()

    except Request.DoesNotExist:
        await callback.message.answer("–ú—É—Ä–æ–∂–∞–∞—Ç —Ç–æ–ø–∏–ª–º–∞–¥–∏.")
    except Exception as e:
        logging.error(f"X–∞—Ç–æ–ª–∏–∫ yuz berdi: {e}")
        await callback.message.answer("X–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏.")


@main_router.message(ComplaintForm.waiting_for_reply)
async def send_reply(message: Message, state: FSMContext):
    data = await state.get_data()
    request_id = data.get("request_id")
    user_telegram_id = data.get("telegram_id")
    main_msg_id = data.get("message_id")

    reply_text = message.text

    @sync_to_async
    def mark_request_as_answered(_id):
        req = Request.objects.get(id=_id)
        req.is_read = True
        req.save()
        return req

    try:
        request_obj = await mark_request_as_answered(request_id)

        await bot.send_message(
            chat_id=user_telegram_id,
            text=f"üì© *–†–∞“≥–±–∞—Ä–¥–∞–Ω –∂–∞–≤–æ–± –±–æ—Ä!*\n\n{reply_text}",
            parse_mode="Markdown"
        )

        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=main_msg_id,
            text=(
                f"üì© *–Ø–Ω–≥–∏ –º—É—Ä–æ–∂–∞–∞—Ç* “õ–æ–ª–¥–∏—Ä–∏–ª–¥–∏:\n\n"
                f"üë§ *–ò—Å–º*: {request_obj.full_name}\n"
                f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω*: {request_obj.phone_number}\n"
                f"‚úâÔ∏è *–ú—É—Ä–æ–∂–∞–∞—Ç*: {request_obj.reason}\n"
                f"–°—Ç–∞—Ç—É—Å: *–ñ–∞–≤–æ–± –±–µ—Ä–∏–ª–¥–∏.*"
            ),
            parse_mode="Markdown"
        )

    except Request.DoesNotExist:
        await message.answer("–ú—É—Ä–æ–∂–∞–∞—Ç —Ç–æ–ø–∏–ª–º–∞–¥–∏.")
    except Exception as e:
        logging.error(f"–ñ–∞–≤–æ–± —é–±–æ—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫: {e}")
        await message.answer("–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–≥–∞ –∂–∞–≤–æ–± —é–±–æ—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏.")
    finally:
        await state.clear()


@main_router.callback_query(lambda c: c.data.startswith("ignore:"))
async def ignore_request(callback: CallbackQuery):
    request_id = callback.data.split(":")[1]  # Request ID –Ω–∏ –∞–∂—Ä–∞—Ç–∏–± –æ–ª–∏—à

    try:
        request = await sync_to_async(Request.objects.get)(id=request_id)
        request.is_read = True
        await sync_to_async(request.save)()  # –é–∑–≥–∞—Ä—Ç–∏—Ä–∏—à–Ω–∏ —Å–∞“õ–ª–∞—à

        await callback.message.edit_text(
            text=(
                f"üì© *–Ø–Ω–≥–∏ –º—É—Ä–æ–∂–∞–∞—Ç* “õ–æ–ª–¥–∏—Ä–∏–ª–¥–∏:\n\n"
                f"üë§ *–ò—Å–º*: {request.full_name}\n"
                f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω*: {request.phone_number}\n"
                f"‚úâÔ∏è *–ú—É—Ä–æ–∂–∞–∞—Ç*: {request.reason}\n"
                f"–°—Ç–∞—Ç—É—Å: *–≠—ä—Ç–∏–±–æ—Ä—Å–∏–∑ “õ–æ–ª–¥–∏—Ä–∏–ª–¥–∏.*"
            ),
            parse_mode="Markdown",
            reply_markup=None  # –¢—É–≥–º–∞–ª–∞—Ä–Ω–∏ –æ–ª–∏–± —Ç–∞—à–ª–∞—à
        )
        await callback.answer("–≠—ä—Ç–∏–±–æ—Ä—Å–∏–∑ “õ–æ–ª–¥–∏—Ä–∏–ª–¥–∏.")
    except Request.DoesNotExist:
        await callback.message.answer("–ú—É—Ä–æ–∂–∞–∞—Ç —Ç–æ–ø–∏–ª–º–∞–¥–∏.")
    except Exception as e:
        logging.error(f"–ú—É—Ä–æ–∂–∞–∞—Ç–Ω–∏ —ç—ä—Ç–∏–±–æ—Ä—Å–∏–∑ “õ–æ–ª–¥–∏—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫: {e}")
        await callback.message.answer("–°—Ç–∞—Ç—É—Å–Ω–∏ —è–Ω–≥–∏–ª–∞—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏.")


@main_router.callback_query(lambda c: c.data.startswith("reject:"))
async def ignore_request(callback: CallbackQuery):
    request_id = callback.data.split(":")[1]  # Request ID –Ω–∏ –∞–∂—Ä–∞—Ç–∏–± –æ–ª–∏—à

    try:
        request = await sync_to_async(Request.objects.get)(id=request_id)
        request.is_read = True
        await sync_to_async(request.save)()  # –é–∑–≥–∞—Ä—Ç–∏—Ä–∏—à–Ω–∏ —Å–∞“õ–ª–∞—à

        await callback.message.edit_text(
            text=(
                f"üì© *–Ø–Ω–≥–∏ –º—É—Ä–æ–∂–∞–∞—Ç* “õ–æ–ª–¥–∏—Ä–∏–ª–¥–∏:\n\n"
                f"üë§ *–ò—Å–º*: {request.full_name}\n"
                f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω*: {request.phone_number}\n"
                f"‚úâÔ∏è *–ú—É—Ä–æ–∂–∞–∞—Ç*: {request.reason}\n"
                f"–°—Ç–∞—Ç—É—Å: *–†–∞–¥ —ç—Ç–∏–ª–¥–∏..*"
            ),
            parse_mode="Markdown",
            reply_markup=None,  # –¢—É–≥–º–∞–ª–∞—Ä–Ω–∏ –æ–ª–∏–± —Ç–∞—à–ª–∞—à

        ),

        await callback.answer("–†–∞–¥ —ç—Ç–∏–ª–¥–∏..")
    except Request.DoesNotExist:
        await callback.message.answer("–ú—É—Ä–æ–∂–∞–∞—Ç —Ç–æ–ø–∏–ª–º–∞–¥–∏.")
    except Exception as e:
        logging.error(f"–ú—É—Ä–æ–∂–∞–∞—Ç–Ω–∏ —ç—ä—Ç–∏–±–æ—Ä—Å–∏–∑ “õ–æ–ª–¥–∏—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫: {e}")
        await callback.message.answer("–°—Ç–∞—Ç—É—Å–Ω–∏ —è–Ω–≥–∏–ª–∞—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏.")


@main_router.callback_query(ComplaintForm.confirm_details, lambda c: c.data == "reject")
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–ú—É—Ä–∞–∂–∞—Ç–∏–Ω–≥–∏–∑–∏–Ω “õ–∞–π—Ç–∞ —é–±–æ—Ä–∏–Ω–≥..",
                                  reply_markup=restart_button())
    await callback.answer()


@main_router.callback_query(lambda c: c.data == "restart_process")
async def restart_process(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–ú—É—Ä–∞–∂–∞—Ç–∏–Ω–≥–∏–∑–Ω–∏ —ë–∑–∏–± “õ–æ–ª–¥–∏—Ä–∏–Ω–≥....",
        reply_markup=murajat_button()
    )
    await state.set_state(ComplaintForm.waiting_for_complaint)
    await callback.answer()
